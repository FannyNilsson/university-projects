#version 430
layout(location=0) in vec2 uv;
layout(location=1) in vec3 norm;
layout(location=2) in vec3 vertPos;

layout (location=0)out vec3 Color;
layout(location = 1) out vec4 specularColor;
uniform sampler2D texSampler;

uniform vec4 lightPos = vec4(0,0,0, 0);
uniform vec4 diffuseColor = vec4(0.0, 0.0, 0.0, 0);
uniform vec4 specColor = vec4(0.0, 0.0, 0.0, 0);
const float shininess = 16.0;
const float screenGamma = 5.2;

void main()
{
    
    vec3 normal = normalize(norm);
    vec3 lightDir = normalize(vec3(lightPos) - vertPos);

    float lambertian = max(dot(lightDir,normal), 0.0);
    float specular = 0.0;

    if(lambertian > 0.0)
    {
        vec3 viewDir = normalize(-vertPos);

        vec3 halfDir = normalize(lightDir + viewDir);
           float specAngle = max(dot(halfDir, normal), 0.0);
            specular = pow(specAngle, shininess);

    }
    
    vec3 colorLinear = lambertian * vec3(diffuseColor) + specular * vec3(specColor);
    vec3 colorGammaCorrected = pow(colorLinear, vec3(1.0/screenGamma));
    specularColor = vec4(colorGammaCorrected, 1.0);
    Color = (texture(texSampler,uv).rgb) * colorLinear;
};